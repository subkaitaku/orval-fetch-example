/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
export type CreatePetsBody = {
  name: string;
  tag: string;
};

export type ListPetsParams = {
/**
 * How many items to return at one time (max 100)
 */
limit?: string;
};

export interface Error {
  code: number;
  message: string;
}

export type Pets = Pet[];

export type CatType = typeof CatType[keyof typeof CatType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CatType = {
  cat: 'cat',
} as const;

export interface Cat {
  petsRequested?: number;
  type: CatType;
}

export type DachshundBreed = typeof DachshundBreed[keyof typeof DachshundBreed];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DachshundBreed = {
  Dachshund: 'Dachshund',
} as const;

export interface Dachshund {
  breed: DachshundBreed;
  length: number;
}

export type LabradoodleBreed = typeof LabradoodleBreed[keyof typeof LabradoodleBreed];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabradoodleBreed = {
  Labradoodle: 'Labradoodle',
} as const;

export interface Labradoodle {
  breed: LabradoodleBreed;
  cuteness: number;
}

export type DogType = typeof DogType[keyof typeof DogType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DogType = {
  dog: 'dog',
} as const;

export type Dog = (Labradoodle & {
  barksPerMinute?: number;
  type: DogType;
}) | (Dachshund & {
  barksPerMinute?: number;
  type: DogType;
});

export type PetCountry = typeof PetCountry[keyof typeof PetCountry];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PetCountry = {
  'People\'s_Republic_of_China': 'People\'s Republic of China',
  Uruguay: 'Uruguay',
} as const;

export type PetCallingCode = typeof PetCallingCode[keyof typeof PetCallingCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PetCallingCode = {
  '+33': '+33',
  '+420': '+420',
} as const;

export type Pet = (Dog & {
  '@id'?: string;
  callingCode?: PetCallingCode;
  country?: PetCountry;
  email?: string;
  id: number;
  name: string;
  tag?: string;
}) | (Cat & {
  '@id'?: string;
  callingCode?: PetCallingCode;
  country?: PetCountry;
  email?: string;
  id: number;
  name: string;
  tag?: string;
});



/**
 * @summary List all pets
 */
export type listPetsResponse = {
  data: Pets;
  status: number;
}

export const getListPetsUrl = (params?: ListPetsParams,) => {

  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value === null) {
      normalizedParams.append(key, 'null');
    } else if (value !== undefined) {
      normalizedParams.append(key, value.toString());
    }
  });

  return `/pets?${normalizedParams.toString()}`
}

export const listPets = async (params?: ListPetsParams, options?: RequestInit): Promise<listPetsResponse> => {
  const res = await fetch(getListPetsUrl(params),
  {      
    ...options,
    method: 'GET'
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}


/**
 * @summary Create a pet
 */
export type createPetsResponse = {
  data: Pet;
  status: number;
}

export const getCreatePetsUrl = () => {


  return `/pets`
}

export const createPets = async (createPetsBody: CreatePetsBody, options?: RequestInit): Promise<createPetsResponse> => {
  const res = await fetch(getCreatePetsUrl(),
  {      
    ...options,
    method: 'POST',
    body: JSON.stringify(
      createPetsBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}


/**
 * @summary Info for a specific pet
 */
export type showPetByIdResponse = {
  data: Pet;
  status: number;
}

export const getShowPetByIdUrl = (petId: string,) => {


  return `/pets/${petId}`
}

export const showPetById = async (petId: string, options?: RequestInit): Promise<showPetByIdResponse> => {
  const res = await fetch(getShowPetByIdUrl(petId),
  {      
    ...options,
    method: 'GET'
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getListPetsResponseLabradoodleMock = (overrideResponse: Partial<Labradoodle> = {}): Labradoodle => ({...{breed: faker.helpers.arrayElement(['Labradoodle'] as const), cuteness: faker.number.int({min: undefined, max: undefined})}, ...overrideResponse});

export const getListPetsResponseDachshundMock = (overrideResponse: Partial<Dachshund> = {}): Dachshund => ({...{breed: faker.helpers.arrayElement(['Dachshund'] as const), length: faker.number.int({min: undefined, max: undefined})}, ...overrideResponse});

export const getListPetsResponseDogMock = (overrideResponse: Omit<Partial<Dog>, 'breed'> = {}): Dog => ({...faker.helpers.arrayElement([{...getListPetsResponseLabradoodleMock(),barksPerMinute: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement(['dog'] as const)},{...getListPetsResponseDachshundMock(),barksPerMinute: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement(['dog'] as const)}]), ...overrideResponse});

export const getListPetsResponseCatMock = (overrideResponse: Partial<Cat> = {}): Cat => ({...{petsRequested: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement(['cat'] as const)}, ...overrideResponse});

export const getListPetsResponseMock = (): Pets => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{...getListPetsResponseDogMock(),'@id': faker.helpers.arrayElement([faker.word.sample(), undefined]), callingCode: faker.helpers.arrayElement([faker.helpers.arrayElement(['+33','+420','+33'] as const), undefined]), country: faker.helpers.arrayElement([faker.helpers.arrayElement(['People\'s Republic of China','Uruguay'] as const), undefined]), email: faker.helpers.arrayElement([faker.internet.email(), undefined]), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), tag: faker.helpers.arrayElement([faker.word.sample(), undefined])},{...getListPetsResponseCatMock(),'@id': faker.helpers.arrayElement([faker.word.sample(), undefined]), callingCode: faker.helpers.arrayElement([faker.helpers.arrayElement(['+33','+420','+33'] as const), undefined]), country: faker.helpers.arrayElement([faker.helpers.arrayElement(['People\'s Republic of China','Uruguay'] as const), undefined]), email: faker.helpers.arrayElement([faker.internet.email(), undefined]), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), tag: faker.helpers.arrayElement([faker.word.sample(), undefined])}]))))

export const getCreatePetsResponseLabradoodleMock = (overrideResponse: Partial<Labradoodle> = {}): Labradoodle => ({...{breed: faker.helpers.arrayElement(['Labradoodle'] as const), cuteness: faker.number.int({min: undefined, max: undefined})}, ...overrideResponse});

export const getCreatePetsResponseDachshundMock = (overrideResponse: Partial<Dachshund> = {}): Dachshund => ({...{breed: faker.helpers.arrayElement(['Dachshund'] as const), length: faker.number.int({min: undefined, max: undefined})}, ...overrideResponse});

export const getCreatePetsResponseDogMock = (overrideResponse: Omit<Partial<Dog>, 'breed'> = {}): Dog => ({...faker.helpers.arrayElement([{...getCreatePetsResponseLabradoodleMock(),barksPerMinute: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement(['dog'] as const)},{...getCreatePetsResponseDachshundMock(),barksPerMinute: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement(['dog'] as const)}]), ...overrideResponse});

export const getCreatePetsResponseCatMock = (overrideResponse: Partial<Cat> = {}): Cat => ({...{petsRequested: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement(['cat'] as const)}, ...overrideResponse});

export const getCreatePetsResponseMock = (): Pet => (faker.helpers.arrayElement([{...getCreatePetsResponseDogMock(),'@id': faker.helpers.arrayElement([faker.word.sample(), undefined]), callingCode: faker.helpers.arrayElement([faker.helpers.arrayElement(['+33','+420','+33'] as const), undefined]), country: faker.helpers.arrayElement([faker.helpers.arrayElement(['People\'s Republic of China','Uruguay'] as const), undefined]), email: faker.helpers.arrayElement([faker.internet.email(), undefined]), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), tag: faker.helpers.arrayElement([faker.word.sample(), undefined])},{...getCreatePetsResponseCatMock(),'@id': faker.helpers.arrayElement([faker.word.sample(), undefined]), callingCode: faker.helpers.arrayElement([faker.helpers.arrayElement(['+33','+420','+33'] as const), undefined]), country: faker.helpers.arrayElement([faker.helpers.arrayElement(['People\'s Republic of China','Uruguay'] as const), undefined]), email: faker.helpers.arrayElement([faker.internet.email(), undefined]), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), tag: faker.helpers.arrayElement([faker.word.sample(), undefined])}]))

export const getShowPetByIdResponseLabradoodleMock = (overrideResponse: Partial<Labradoodle> = {}): Labradoodle => ({...{breed: faker.helpers.arrayElement(['Labradoodle'] as const), cuteness: faker.number.int({min: undefined, max: undefined})}, ...overrideResponse});

export const getShowPetByIdResponseDachshundMock = (overrideResponse: Partial<Dachshund> = {}): Dachshund => ({...{breed: faker.helpers.arrayElement(['Dachshund'] as const), length: faker.number.int({min: undefined, max: undefined})}, ...overrideResponse});

export const getShowPetByIdResponseDogMock = (overrideResponse: Omit<Partial<Dog>, 'breed'> = {}): Dog => ({...faker.helpers.arrayElement([{...getShowPetByIdResponseLabradoodleMock(),barksPerMinute: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement(['dog'] as const)},{...getShowPetByIdResponseDachshundMock(),barksPerMinute: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement(['dog'] as const)}]), ...overrideResponse});

export const getShowPetByIdResponseCatMock = (overrideResponse: Partial<Cat> = {}): Cat => ({...{petsRequested: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement(['cat'] as const)}, ...overrideResponse});

export const getShowPetByIdResponseMock = (): Pet => (faker.helpers.arrayElement([{...getShowPetByIdResponseDogMock(),'@id': faker.helpers.arrayElement([faker.word.sample(), undefined]), callingCode: faker.helpers.arrayElement([faker.helpers.arrayElement(['+33','+420','+33'] as const), undefined]), country: faker.helpers.arrayElement([faker.helpers.arrayElement(['People\'s Republic of China','Uruguay'] as const), undefined]), email: faker.helpers.arrayElement([faker.internet.email(), undefined]), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), tag: faker.helpers.arrayElement([faker.word.sample(), undefined])},{...getShowPetByIdResponseCatMock(),'@id': faker.helpers.arrayElement([faker.word.sample(), undefined]), callingCode: faker.helpers.arrayElement([faker.helpers.arrayElement(['+33','+420','+33'] as const), undefined]), country: faker.helpers.arrayElement([faker.helpers.arrayElement(['People\'s Republic of China','Uruguay'] as const), undefined]), email: faker.helpers.arrayElement([faker.internet.email(), undefined]), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), tag: faker.helpers.arrayElement([faker.word.sample(), undefined])}]))


export const getListPetsMockHandler = (overrideResponse?: Pets | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Pets> | Pets)) => {
  return http.get('*/pets', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListPetsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreatePetsMockHandler = (overrideResponse?: Pet | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Pet> | Pet)) => {
  return http.post('*/pets', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreatePetsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getShowPetByIdMockHandler = (overrideResponse?: Pet | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Pet> | Pet)) => {
  return http.get('*/pets/:petId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getShowPetByIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getSwaggerPetstoreMock = () => [
  getListPetsMockHandler(),
  getCreatePetsMockHandler(),
  getShowPetByIdMockHandler()
]
